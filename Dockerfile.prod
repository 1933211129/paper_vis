# 多阶段构建 - 生产环境Django后端
# 阶段一：构建依赖
FROM python:3.11-slim-bookworm AS builder

# 设置工作目录
WORKDIR /app

# 安装系统依赖和构建工具
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# 安装pip-tools
RUN pip install --no-cache-dir pip-tools

# 复制依赖文件
COPY requirements.in requirements.txt ./

# 安装Python依赖
RUN pip install --no-cache-dir -r requirements.txt


# 阶段二：运行环境
FROM python:3.11-slim-bookworm AS final

# 设置工作目录
WORKDIR /app

# 创建非root用户
RUN groupadd -r django && useradd -r -g django django

# 安装运行时依赖
RUN apt-get update && apt-get install -y \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# 复制依赖文件（注意：仅复制文件，不在 final 阶段安装构建工具）
COPY requirements.txt ./

# **关键修正**：在 final 阶段重新安装运行时依赖，确保Gunicorn路径正确
RUN pip install --no-cache-dir -r requirements.txt

# 复制Django项目代码
COPY . .

# 创建必要的目录
RUN mkdir -p /app/uploads/papers && \
    mkdir -p /app/logs

# 设置目录权限
RUN chown -R django:django /app

# 切换到非root用户
USER django

# 设置环境变量
ENV PYTHONPATH=/app
ENV DJANGO_SETTINGS_MODULE=myproject.settings
ENV GUNICORN_BIND=0.0.0.0:8000
ENV GUNICORN_WORKERS=4
ENV GUNICORN_TIMEOUT=120

# 暴露端口
EXPOSE 8000

# 健康检查
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/api/health/', timeout=10)"

# 启动命令：通过Python模块方式启动Gunicorn (已修正)
CMD ["python", "-m", "gunicorn", "--bind", "0.0.0.0:8000", "--workers", "4", "--timeout", "120", "myproject.wsgi:application"]